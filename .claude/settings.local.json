{
  "permissions": {
    "allow": [
      "Bash(dir:*)",
      "Bash(docker-compose up:*)",
      "Bash(docker compose:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nInitial commit - Complete Project Manager application with Gantt charts\n\nFull-featured project management application with:\n- Interactive DHTMLX Gantt chart with drag-and-drop\n- Task dependencies (4 types: FS, SS, FF, SF)\n- File uploads and attachments\n- Comments and activity tracking\n- Team collaboration with 4 role levels\n- Export to Excel, CSV, and PDF\n- JWT authentication with refresh tokens\n- Docker containerization ready\n- Complete testing suite (Jest + Vitest)\n- CI/CD pipeline with GitHub Actions\n\nTech stack: React + TypeScript + Vite, Node.js + Express, PostgreSQL 15\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git remote add:*)",
      "Bash(git branch:*)",
      "Bash(git push:*)",
      "Bash(node -e \"console.log(''DB_PASSWORD='' + require(''crypto'').randomBytes(32).toString(''hex''))\")",
      "Bash(node -e \"console.log(''JWT_SECRET='' + require(''crypto'').randomBytes(64).toString(''hex''))\")",
      "Bash(node -e \"console.log(''JWT_REFRESH_SECRET='' + require(''crypto'').randomBytes(64).toString(''hex''))\")",
      "Bash(git commit:*)",
      "Bash(npm install)",
      "Bash(npm run build:*)",
      "Bash(echo \"Run these commands on your VPS to diagnose:\n\n# Check if backend container is running\ndocker-compose ps\n\n# Check memory usage\ndocker stats --no-stream\n\n# Check backend logs\ndocker-compose logs backend --tail=100\n\n# Check system memory\nfree -h\n\n# Try to restart just the backend\ndocker-compose restart backend\")",
      "Bash(echo \"Run these commands:\n\n# Check all containers status\ndocker-compose ps\n\n# Get backend logs (correct syntax)\ndocker-compose logs --tail=100 backend\n\n# If backend is stopped, try to start it and watch logs\ndocker-compose up -d backend && docker-compose logs -f backend\")",
      "Bash(ssh:*)",
      "Bash(scp:*)",
      "Bash(git restore:*)",
      "Bash(echo \"Run this command on your VPS to see the backend errors:\n\ndocker-compose logs --tail=50 backend\n\nThen paste the errors here so I can help fix them.\")",
      "Bash(echo \"Run this on your VPS to see what entity types exist:\n\ndocker-compose exec postgres psql -U pm_user -d project_manager -c \"\"SELECT unnest(enum_range(NULL::entity_type));\"\"\n\nThen we''ll add ''group'' to that enum.\")",
      "Bash(docker exec:*)",
      "WebFetch(domain:www.teamgantt.com)",
      "WebFetch(domain:dribbble.com)",
      "Bash(curl -s \"https://dribbble.com/shots/10881653-Woodpecker-Gantt-Chart-and-Table-View-Hybrid-for-PM-SaaS\")",
      "WebSearch",
      "Bash(git revert:*)",
      "Bash(echo \"Run this on your VPS to verify the backend has the color field:\n\n# Check the backend code in the container\ndocker exec pm_backend grep -A 5 ''interface Task'' /app/dist/services/tasks.service.d.ts | grep color\n\n# If that doesn''t show color, the files weren''t deployed. Run:\ncd ~/project-manager\ndocker cp backend/dist/. pm_backend:/app/dist/\ndocker-compose restart backend\n\n# Wait 5 seconds then check the logs\nsleep 5\ndocker-compose logs --tail=30 backend\")",
      "Bash(echo \"Run this on your VPS to see the actual API response:\n\ndocker-compose logs --tail=100 backend | grep ''SELECT'' -A 20 | grep -i color\")",
      "Bash(echo:*)",
      "Bash(cat:*)"
    ],
    "deny": [],
    "ask": []
  }
}
